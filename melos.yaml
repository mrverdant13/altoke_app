name: monorepo

repository: https://github.com/mrverdant13/altoke_app

packages:
  - ./packages/brick/hooks/
  - ./packages/brick_e2e/
  - ./packages/brick_generator/
  - ./packages/reference_app/packages/app/
  - ./packages/reference_app/packages/common/
  - ./packages/reference_app/packages/element_in_memory_cache/
  - ./packages/reference_app/packages/tasks/
  - ./packages/reference_app/packages/tasks_repository/
  - ./packages/reference_app/packages/tasks_storage/_conditional_dir___use_isar_database___tasks_isar_storage/
  - ./packages/reference_app/packages/tasks_storage/_conditional_dir___use_hive_database___tasks_hive_storage/
  - ./packages/reference_app/packages/tasks_storage/_conditional_dir___use_realm_database___tasks_realm_storage/
  - ./packages/reference_app/packages/tasks_storage/_conditional_dir___use_sembast_database___tasks_sembast_storage/
  - ./packages/reference_app/packages/tasks_storage/_conditional_dir___use_sqlite_database___tasks_sqlite_storage/
  - ./packages/reference_app/packages/tasks_storage/tasks_storage/
  - ./tools/brick_generator/

command:
  bootstrap:
    environment:
      sdk: ">=3.3.1 <4.0.0"
      flutter: ">=3.19.3 <4.0.0"
    dependencies:
      meta: ^1.11.0
    hooks:
      post:
        run: >
          melos exec --depends-on realm -- "dart run realm install"
  clean:
    hooks:
      pre:
        run: melos run clean

scripts:
  # Clean-up
  clean:
    description: Deep clean up
    run: >
      git clean --exclude="!android" --exclude="!ios" --exclude="!linux" --exclude="!macos" --exclude="!web" --exclude="!windows" -dfX .
    exec:
      concurrency: 1

  # Code generation
  gen:
    description: Generate code for a package
    run: dart run build_runner build -d
    packageFilters:
      dependsOn:
        - build_runner
    exec:
      failFast: true
      concurrency: 1
      orderDependents: true
  gen.realm:
    description: Generate code for a package with Realm
    run: dart run realm generate
    packageFilters:
      dependsOn:
        - realm
      ignore:
        - altoke_app
    exec:
      failFast: true
      concurrency: 1
      orderDependents: true
  gen.all:
    description: Generate code for all packages
    run: melos run gen --no-select && melos run gen.realm --no-select
  gen.all.fast:
    description: Generate code for all packages (multi-threaded)
    run: >
      melos exec --depends-on=build_runner -- "dart run build_runner build -d"
      &&
      melos exec --depends-on=realm --ignore=altoke_app -- "dart run realm generate"

  # Spell checking
  spellcheck:
    description: Run spell checking for the entire project
    run: cspell lint --no-progress -c ./.cspell/cspell.yaml MELOS_ROOT_PATH/**

  # Formatting
  format:
    description: Format a package
    run: dart format .
    exec:
      concurrency: 1
  format.all:
    description: Format all packages
    run: melos run format --no-select
  format.ci:
    description: Format all packages (CI)
    run: melos exec --fail-fast -- "dart format --set-exit-if-changed ."

  # Analyzing
  analyze.dart:
    description: Analyze a Dart package
    run: dart analyze --fatal-infos --fatal-warnings
    packageFilters:
      flutter: false
    exec:
      concurrency: 1
      orderDependents: true
  analyze.flutter:
    description: Analyze a Flutter package
    run: flutter analyze --fatal-infos --fatal-warnings
    packageFilters:
      flutter: true
    exec:
      concurrency: 1
      orderDependents: true
  analyze.custom:
    description: Analyze a package with custom lint rules
    run: dart run custom_lint
    packageFilters:
      dependsOn:
        - custom_lint
    exec:
      concurrency: 1
      orderDependents: true
  analyze.all:
    description: Analyze all packages
    run: >
      melos run analyze.dart --no-select &&
      melos run analyze.flutter --no-select &&
      melos run analyze.custom --no-select
  analyze.ci:
    description: Analyze all packages (CI)
    run: >
      melos exec --fail-fast --order-dependents --no-flutter -- "dart analyze --fatal-infos --fatal-warnings" &&
      melos exec --fail-fast --order-dependents --flutter -- "flutter analyze --fatal-infos --fatal-warnings --no-pub --no-congratulate --no-preamble" &&
      melos exec --fail-fast --order-dependents --depends-on=custom_lint -- "dart run custom_lint --fatal-infos --fatal-warnings"

  # Testing & Coverage
  test.dart:
    description: Test a Dart package
    run: >
      dart test -x ci-only --coverage=coverage -r expanded --test-randomize-ordering-seed random --color &&
      format_coverage --lcov --in=coverage --out=coverage/lcov.info --report-on=lib -b MELOS_PACKAGE_PATH
    packageFilters:
      flutter: false
      dirExists:
        - test
    exec:
      concurrency: 1
      orderDependents: true
  test.flutter:
    description: Test a Flutter package
    run: flutter test -x ci-only --coverage -r expanded --test-randomize-ordering-seed random
    packageFilters:
      flutter: true
      dirExists:
        - test
    exec:
      concurrency: 1
      orderDependents: true
  # HACK: E2E tests cannot be run with Melos
  # This is because Melos does not support running scripts for other Melos mono-repos.
  # test.e2e:
  #   description: Run E2E tests
  #   run: dart test e2e --run-skipped -t e2e
  #   packageFilters:
  #     flutter: false
  #     dirExists:
  #       - e2e
  #   exec:
  #     concurrency: 1
  #     orderDependents: true
  test.all:
    description: Test all packages
    run: melos run test.dart --no-select && melos run test.flutter --no-select
  test.ci:
    description: Test all packages (CI)
    run: >
      melos exec --fail-fast --order-dependents --no-flutter --dir-exists="test" -- "dart test -x ci-only --coverage=coverage -r expanded --test-randomize-ordering-seed random && format_coverage --lcov --in=coverage --out=coverage/lcov.info --report-on=lib -b MELOS_PACKAGE_PATH"
      &&
      melos exec --fail-fast --order-dependents --flutter --dir-exists="test" -- "flutter test -x ci-only --coverage -r expanded --test-randomize-ordering-seed random"
  coverage.merge:
    description: Merge all packages coverage trace files ignoring data related to generated files
    run: >
      coverde rm MELOS_ROOT_PATH/coverage/filtered.lcov.info &&
      melos exec -c 1 --file-exists=coverage/lcov.info -- "coverde filter --input ./coverage/lcov.info --output MELOS_ROOT_PATH/coverage/filtered.lcov.info --paths-parent MELOS_PACKAGE_PATH  --filters \.drift\.dart,\.freezed\.dart,\.g\.dart,\.gr\.dart"
  coverage.check:
    description: Check test coverage
    run: >
      coverde check -i MELOS_ROOT_PATH/coverage/filtered.lcov.info 100

  # Brick management
  brick.gen.new:
    description: Generate brick
    run: >
      dart run MELOS_ROOT_PATH/tools/brick_generator/lib/main.dart MELOS_PACKAGE_PATH
    exec:
      concurrency: 1
    packageFilters:
      scope:
        - "*_brick_scope"
  brick.gen:
    description: Generate brick
    run: dart run MELOS_ROOT_PATH/packages/brick_generator/lib/main.dart
  brick.install:
    description: Add brick globally
    run: mason add -g altoke_app --path MELOS_ROOT_PATH/packages/brick/
  brick.all:
    description: Generate brick and add it globally
    run: melos run brick.gen && melos run brick.install

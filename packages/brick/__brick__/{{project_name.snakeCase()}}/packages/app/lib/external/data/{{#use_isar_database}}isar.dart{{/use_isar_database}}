import 'dart:developer';

import 'package:{{project_name.snakeCase()}}/external/external.dart';
import 'package:isar/isar.dart';
import 'package:meta/meta.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:tasks_isar_storage/tasks_isar_storage.dart';

part 'isar.g.dart';

/// An Isar metadata representation.
///
/// This is expected to be a unique value.
@visibleForTesting
@Collection(accessor: 'metadata')
class IsarMetadata {
  /// Metadata ID.
  late Id id = Isar.autoIncrement;

  /// Task description.
  late int version = 0;
}

@visibleForTesting
extension MetadataCollection on IsarCollection<IsarMetadata> {
  /// Returns the current version.
  Future<int> getVersion() async {
    final metadata = await where().findFirst() ?? IsarMetadata();
    return metadata.version;
  }

  Future<void> setVersion(int version) async {
    final metadata = await where().findFirst() ?? IsarMetadata();
    await clear();
    await put(metadata..version = version);
  }
}

@Riverpod(dependencies: [])
Isar isarDb(IsarDbRef ref) {
  throw UnimplementedError(
    '`${isarDbPod.name}` was not initialized.',
  );
}

Future<void> runIsarMigrations({
  required Isar database,
  required int newVersion,
  required bool isDebugMode,
}) async {
  final metadataCollection = database.metadata;
  final oldVersion = await metadataCollection.getVersion();
  // Migration logic v
  if (isDebugMode) {
    // coverage:ignore-start
    log(
      'Isar migration: '
      'oldVersion: $oldVersion => newVersion: $newVersion',
    );
    final tasksCollection = database.isarTasks;
    final existingTasksCount = await tasksCollection.count();
    if (existingTasksCount > 0) return;
    await database.writeTxn(
      () => tasksCollection.importJson(
        [
          for (final (index, fakeTask) in rawFakeTasks.indexed)
            {
              'id': Isar.minId + index,
              ...fakeTask,
              'createdAt': DateTime.parse(fakeTask['createdAt'] as String)
                  .microsecondsSinceEpoch,
            },
        ],
      ),
    );
    // coverage:ignore-end
  }
  // Migration logic ^
  await database.writeTxn(() async {
    await metadataCollection.setVersion(newVersion);
  });
}
